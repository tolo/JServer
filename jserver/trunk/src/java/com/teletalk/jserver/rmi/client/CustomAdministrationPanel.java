/*
 * Copyright 2007 the project originators.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.teletalk.jserver.rmi.client;

import java.awt.LayoutManager;

import javax.swing.JPanel;

import com.teletalk.jserver.rmi.remote.RemoteJServer;

/**
 * Abstract baseclass for custom panels in the administration GUI such
 * as the help and test panels.
 * 
 * @author Tobias Löfstrand
 * 
 * @since Alpha
 */
public abstract class CustomAdministrationPanel extends JPanel
{
	static final long serialVersionUID = -5215174410431882951L;
	
	/**	A RemoteJServer object. */
	public static RemoteJServer remoteServer = null;
	
	/** 
	 * Reference to an Administrator object, which makes it possible for this CustomAdministrationPanel to 
	 * interact with the administration tool in a limited fashion.
	 */
	public static Administrator administrator = null;
	
	/**
	 * Creates a new CustomAdministrationPanel.
	 */
	public CustomAdministrationPanel()
	{
		super();
	}
	
	/**
	 * Creates a new CustomAdministrationPanel with the specified layout manager
	 * 
	 * @param layout a LayoutManager (e.g. BorderLayout, FlowLayout etc.).
	 */
	public CustomAdministrationPanel(LayoutManager layout)
	{
		super(layout);
	}
	
	/**
	 * Gets the title for this CustomAdministrationPanel that will be shown in the administration tool. This 
	 * implementation returns null, which will result i a title generated by the administration tool itself.
	 * 
	 * @return the title of the panel.
	 */
	public String getTitle()
	{
		return null;
	}
	
	/**
	 * Called when the administration client disconnected itself from the server and this CustomAdministrationPanel 
	 * is to be destroyed. This is a null-implementation.
	 */
	protected void destroyPanel()
	{
	}
	
	/**
	 * Sets the RemoteJServer object, representing the remote server. <br>
	 * <br>
	 * This method is called by the client after a connection has been established to the server.
	 * 
	 * @param remote an RemoteJServer object
	 */
	protected static void setRemoteJServer(RemoteJServer remote)
	{
		remoteServer = remote;
	}
	
	/**
	 * Sets the Administrator object. This object is used on the clientside to administrate the server and 
	 * contains methods that allows this CustomAdministrationPanel to interact with the administration tool 
	 * in a limited fashion. <br>
	 * <br>This method is called by the client after a connection has been established to the server.
	 * 
	 * @param adm an Administrator object.
	 */
	protected static void setAdministrator(Administrator adm)
	{
		administrator = adm;
	}
}
