/*
 * Copyright 2007 the project originators.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 TODO: Support for fetching runtime statistics (return tree structure of canonicalized objects)
 */
package com.teletalk.jserver.tcp.messaging.admin;

import java.io.InputStream;
import java.util.Properties;

import com.teletalk.jserver.log.LogData;
import com.teletalk.jserver.rmi.remote.RemoteSubComponentData;
import com.teletalk.jserver.tcp.messaging.rpc.RpcException;

/**
 * Interface for RPC based remote administration of a JServer via messaging.
 * 
 * @author Tobias Löfstrand
 * 
 * @since 2.0.1 (20040924)
 */
public interface ServerAdministrationInterface
{
   /** 
    * The version of the interface.<br>
    * <br>
    * <b>Version 2</b>:<br>
    * * Method {@link #getSystemProperties()} added.<br> 
    * * Method {@link #getMaxMemory()} added.<br>
    * * Method {@link #getUsedMemory()} added.<br>
    * <br>
    * <b>Version 3</b>:<br>
    * * Method {@link #engageComponent(String)} now returns boolean indicating success.<br> 
    * * Method {@link #shutDownComponent(String)} now returns boolean indicating success.<br>
    * * Method {@link #reinitializeComponent(String)} now returns boolean indicating success.<br>
    * * Method {@link #setPropertyValue(String, String)} now returns boolean indicating success.<br> 
    * * Method {@link #setPropertyValue(String, String[])} now returns boolean indicating success.<br>
    * * Method {@link #getPropertyValues(String)} added.
    * <br>
    * <b>Version 4</b>:<br>
    * * Method {@link #getLogTail(String, String, long)} added.<br>
    * <br> 
    * <b>Version 6 (2.1.3 20060324)</b>:<br>
    * * All components in the server are now available as RPC handlers through the component full name.<br>
    * <br>
    * <b>Version 7 (2.1.4 20060505)</b>:<br>
    * * Method getAdministrationHandlerNames() added. This method returns the names of all registered custom administration handlers.<br>
    * <br> 
    * <b>Version 8 (2.1.6 20070503)</b>:<br>
    * * Method ServerFileInfo[] listServerFiles() added.<br>
    * * Method ServerFileInfo[] listServerFiles(String) added.<br>
    * * Method ServerFileData getServerFile(String) added.<br>
    * * Method void putServerFile(ServerFileData) added.<br> 
    * * Method boolean deleteServerFile(String) added.<br> 
    * <br> 
    */
   public static final int INTERFACE_VERSION = 8;
   
   /**
    * Gets the version of this interface.
    * 
    * @throws RpcException if an error occurrs during remote processing of the command.  
    */
   public int getInterfaceVersion() throws RpcException;
   
   /**
    * Gets the names of all appender components (i.e. components capable of generating logs) in the server.
    * 
    * @throws RpcException if an error occurrs during remote processing of the command.
    */
   public String[] getAppenderComponentNames() throws RpcException;
   
   /**
    * Gets records of all available logs in the server.
    * 
    * @throws RpcException if an error occurrs during remote processing of the command.
    */
   public LogData[] getLogs() throws RpcException;
   
   /**
    * Gets records of all available logs in the specified appender component (as previously returned by {@link #getAppenderComponentNames()}).
    * 
    * @throws RpcException if an error occurrs during remote processing of the command.
    */
   public LogData[] getLogs(final String appenderName) throws RpcException;
   
   /**
    * Gets an InputStream for reading the contents of the specified log from generated by the specified appender component.<br>
    * <br>
    * Note: the server side implementation shoule return a {@link com.teletalk.jserver.tcp.messaging.rpc.RpcInputStreamResponse} object or object with similar functionality. 
    * 
    * @throws RpcException if an error occurrs during remote processing of the command.
    */
   public InputStream getLog(final String appenderName, final String log) throws RpcException;
   
   /**
    * Gets an InputStream for reading the contents of the specified log from generated by the specified appender component.<br>
    * <br>
    * Note: the server side implementation shoule return a {@link com.teletalk.jserver.tcp.messaging.rpc.RpcInputStreamResponse} object or object with similar functionality. 
    * 
    * @throws RpcException if an error occurrs during remote processing of the command.
    */
   public InputStream getLogTail(final String appenderName, final String log, final long tailSize) throws RpcException;   
   
   /**
    * Gets administraion data (recursively) of the root component in the remote server. 
    * 
    * @throws RpcException if an error occurrs during remote processing of the command.
    */
   public RemoteSubComponentData getRemoteSubComponentData() throws RpcException;
   
   /**
    * Gets administraion data (recursively) of the specified component in the remote server. 
    * 
    * @throws RpcException if an error occurrs during remote processing of the command.
    */
   public RemoteSubComponentData getRemoteSubComponentData(final String componentFullName) throws RpcException;
   
   /**
    * Starts the specified component.
    * 
    * @throws RpcException if an error occurrs during remote processing of the command.
    */
   public boolean engageComponent(final String componentFullName) throws RpcException;
   
   /**
    * Stops the specified component.
    * 
    * @throws RpcException if an error occurrs during remote processing of the command.
    */
   public boolean shutDownComponent(final String componentFullName) throws RpcException;
   
   /**
    * Restarts the specified component.
    * 
    * @throws RpcException if an error occurrs during remote processing of the command.
    */
   public boolean reinitializeComponent(final String componentFullName) throws RpcException;
   
   /**
    * Sets the value of the specified property as a string. The format of the propertyFullName parameter is a the "path" of the property, 
    * i.e. <componentName>.<componentName>.<propertyName>, for instance MyServer.MyComponent.MyProperty.  
    * 
    * @throws RpcException if an error occurrs during remote processing of the command.
    */
   public boolean setPropertyValue(final String propertyFullName, final String value) throws RpcException;
   
   /**
    * Sets the value of the specified property as a array of strings. The format of the propertyFullName parameter is a the "path" of the property, 
    * i.e. <componentName>.<componentName>.<propertyName>, for instance MyServer.MyComponent.MyProperty.  
    * 
    * @throws RpcException if an error occurrs during remote processing of the command.
    */
   public boolean setPropertyValue(final String propertyFullName, final String[] value) throws RpcException;
   
   /**
    * Gets the value of the specified property. The format of the propertyFullName parameter is a the "path" of the property, 
    * i.e. <componentName>.<componentName>.<propertyName>, for instance MyServer.MyComponent.MyProperty.
    * 
    * @throws RpcException if an error occurrs during remote processing of the command.
    */
   public String getPropertyValue(final String propertyFullName) throws RpcException;
   
   /**
    * Gets the values of the specified property. The format of the propertyFullName parameter is a the "path" of the property, 
    * i.e. <componentName>.<componentName>.<propertyName>, for instance MyServer.MyComponent.MyProperty.
    * 
    * @throws RpcException if an error occurrs during remote processing of the command.
    * 
    * @since 2.0 (20041222), interface version 3. 
    */
   public String[] getPropertyValues(final String propertyFullName) throws RpcException;

   /**
    * Gets the system properties (as returned by a call to <code>System.getProperties()</code>) of the remote server.
    * 
    * @throws RpcException if an error occurrs during remote processing of the command.
    * 
    * @since interface version 2.
    */
   public Properties getSystemProperties() throws RpcException;
   
   /**
    * Gets the maximum configured memory in bytes of the remote server. 
    * 
    * @throws RpcException if an error occurrs during remote processing of the command.
    * 
    * @since interface version 2.
    */
   public long getMaxMemory() throws RpcException;
   
   /**
    * Gets the currently used memory in bytes of the remote server.
    * 
    * @throws RpcException if an error occurrs during remote processing of the command.
    * 
    * @since interface version 2.
    */
   public long getUsedMemory() throws RpcException;
   
   /**
    * Gets the names of all registered (custom) administration handlers.
    * 
    * @since 2.1.4 (20060504), interface version 7.
    */
   public String[] getAdministrationHandlerNames() throws RpcException;
   
   /**
    * Lists the files and directories in the server directory.
    * 
    * @since 2.1.6 (20070503), interface version 8.
    */
   public ServerFileInfo[] listServerFiles() throws RpcException;
   
   /**
    * Lists the files and directories in the specified sub directory in the server directory.
    * 
    * @since 2.1.6 (20070503), interface version 8.
    */
   public ServerFileInfo[] listServerFiles(final String subPath) throws RpcException;
   
   /**
    * Gets a file in the server directory.
    * 
    * @since 2.1.6 (20070503), interface version 8.
    */
   public ServerFile getServerFile(final String fileName) throws RpcException;
   
   /**
    * Creates a file or directory in the server directory.
    * 
    * @since 2.1.6 (20070503), interface version 8.
    */
   public void createServerFile(final ServerFile serverFileData) throws RpcException;
   
   /**
    * Deletes a file or directory in the server directory.
    * 
    * @since 2.1.6 (20070503), interface version 8.
    */
   public boolean deleteServerFile(final String fileName) throws RpcException;
}
