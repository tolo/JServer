/*
 * Copyright 2007 the project originators.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.teletalk.jserver.tcp.messaging.admin.hotbeans;

import hotbeans.HotBeanModuleInfo;
import hotbeans.HotBeanModuleRepository;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.teletalk.jserver.net.admin.AdministrationManager;
import com.teletalk.jserver.tcp.messaging.Message;
import com.teletalk.jserver.tcp.messaging.MessageHeader;
import com.teletalk.jserver.tcp.messaging.MessagingManager;
import com.teletalk.jserver.tcp.messaging.rpc.RpcInputStream;

/**
 * Handler for messaging based administration of a Hot Beans repository. HotBeansAdministrationHandler will register itself automatically as an 
 * administration handler ({@link AdministrationManager#addAdministrationHandler(String, Object)}) under the name generated by 
 * the statement: 
 * <code>HotBeansAdministrationInterface.HOT_BEANS_ADMINISTRATION_HANDLER_PREFIX + "." + hotBeanModuleRepository.getName()</code>.<br>
 * <br>
 * To register this administration handler, simply create it in the Spring application context (or create an instance of it in code) and associate 
 * it with a Hot Beans repository.
 *  
 * @author Tobias Löfstrand
 * 
 * @since 2.1.6 (20070508)
 */
public class HotBeansAdministrationHandler implements HotBeansAdministrationInterface
{
   private final Log logger = LogFactory.getLog(this.getClass());
   
   
   private HotBeanModuleRepository hotBeanModuleRepository;

   
   /**
    * Gets the associated HotBeanModuleRepository.
    */
   public HotBeanModuleRepository getHotBeanModuleRepository()
   {
      return hotBeanModuleRepository;
   }

   /**
    * Sets the associated HotBeanModuleRepository.
    */
   public void setHotBeanModuleRepository(HotBeanModuleRepository hotBeanModuleRepository)
   {
      this.hotBeanModuleRepository = hotBeanModuleRepository;
      
      try
      {
         // Register as custom administration handler in AdministrationManager (to enable remote administration via messaging and SNS)
         AdministrationManager.getAdministrationManager().addAdministrationHandler(HOT_BEANS_ADMINISTRATION_HANDLER_PREFIX + "." + this.hotBeanModuleRepository.getName(), this);
      }
      catch(Throwable e) // May occur if an older JServer version (older than 2.1.4) is used
      {
         logger.warn("Unable to register HotBeansMessageReceiver as custom administration handler (possibly due to old JServer version) - " + e + "!");
      }
   }
   
   
   /* ###### */
   
   
   public int getInterfaceVersion()
   {
      return INTERFACE_VERSION;
   }
   
   public String getName()
   {
      return hotBeanModuleRepository.getName();
   }
   
   
   public HotBeanModuleInfo addHotBeanModule(RpcInputStream moduleFile)
   {
      return hotBeanModuleRepository.addHotBeanModule(moduleFile);
   }
   
   public HotBeanModuleInfo updateHotBeanModule(RpcInputStream moduleFile)
   {
      Message message = MessagingManager.getCurrentMessage();
      MessageHeader header = message.getHeader();
      String moduleName = (String)header.getCustomHeaderField(HotBeansAdministrationInterface.MODULE_NAME_PARAM);
      
      return hotBeanModuleRepository.updateHotBeanModule(moduleName, moduleFile);
   }
   
   public HotBeanModuleInfo revertHotBeanModule(String moduleName, long revision)
   {
      return hotBeanModuleRepository.revertHotBeanModule(moduleName, revision);
   }
      
   public void removeHotBeanModule(String moduleName)
   {
      hotBeanModuleRepository.removeHotBeanModule(moduleName);
   }
   

   public String[] getHotBeanModuleNames()
   {
      return hotBeanModuleRepository.getHotBeanModuleNames();
   }

   public HotBeanModuleInfo[] getHotBeanModuleInfo()
   {
      return hotBeanModuleRepository.getHotBeanModuleInfo();
   }

   public HotBeanModuleInfo[] getHotBeanModuleInfo(String moduleName)
   {
      return hotBeanModuleRepository.getHotBeanModuleInfo(moduleName);
   }
   
   public HotBeanModuleInfo getCurrentHotBeanModuleInfo(String moduleName)
   {
      return hotBeanModuleRepository.getCurrentHotBeanModuleInfo(moduleName);
   }
   
   public boolean hasHotBeanModule(String moduleName)
   {
      return hotBeanModuleRepository.hasHotBeanModule(moduleName);
   }
   
   public boolean hasHotBean(final String moduleName, final String beanName)
   {
      return hotBeanModuleRepository.hasHotBean(moduleName, beanName);
   }

   public Object getHotBean(String moduleName, String beanName, Class interfaceClass)
   {
      return hotBeanModuleRepository.getHotBean(moduleName, beanName, interfaceClass);
   }

   public Object getHotBean(String moduleName, String beanName, Class[] interfaceClasses)
   {
      return hotBeanModuleRepository.getHotBean(moduleName, beanName, interfaceClasses);
   }
   
   public String getHotBeanClassName(String moduleName, String beanName)
   {
      return hotBeanModuleRepository.getHotBeanClassName(moduleName, beanName);
   }
   
   public Class getHotBeanClass(String moduleName, String beanName)
   {
      return hotBeanModuleRepository.getHotBeanClass(moduleName, beanName); 
   }
}
