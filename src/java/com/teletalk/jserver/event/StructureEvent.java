/*
 * Copyright 2007 the project originators.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.teletalk.jserver.event;

import com.teletalk.jserver.SubComponent;
import com.teletalk.jserver.SubSystem;
import com.teletalk.jserver.property.Property;
import com.teletalk.jserver.rmi.adapter.PropertyRmiAdapter;
import com.teletalk.jserver.rmi.adapter.SubComponentRmiAdapter;
import com.teletalk.jserver.rmi.remote.RemoteEvent;
import com.teletalk.jserver.rmi.remote.RemotePropertyData;
import com.teletalk.jserver.rmi.remote.RemoteStructureEvent;

/**
 * An eventclass for structure modifications. This event is generated by subcomponents and subsystems when a child component (Property, 
 * SubComponent or SubSystem is added or removed.
 * 
 * @author Tobias Löfstrand
 * 
 * @since Beta 1
 */
public final class StructureEvent extends Event
{
	/** Constant indicating that a component has been added.  */
	public static final boolean ADDED = true;
	
	/** Constant indicating that a component has been removed.  */
	public static final boolean REMOVED = false;
	
	private final Object target;
	private final String targetName;
	private final boolean structureModification;
	
	/**
	 * Constructs a new StructureEvent for a property that has been added or removed.
	 * 
	 * @param source the source of the event.
	 * @param target an associated Property object.
	 * @param structureModification flag indicating if the specified property was added (true) or removed (false).
	 */
	public StructureEvent(SubComponent source, Property target, boolean structureModification)
	{
		super(source, true);
		
		this.target = target;
		this.targetName = target.getName();//target.getFullName();
		this.structureModification = structureModification;
	}
	
	/**
	 * Constructs a new StructureEvent.
	 * 
	 * @param source the source of the event (SubSystem or SubComponent).
	 * @param target an associated SubSystem or SubComponent object.
	 * @param structureModification flag indicating if the specified component was added (true) or removed (false).
	 */
	public StructureEvent(SubComponent source, SubComponent target, boolean structureModification)
	{
		super(source, true);
		
		this.target = target;
		this.targetName = target.getName(); //target.getFullName();
		this.structureModification = structureModification;
	}
	
	/**
	 * Gets the source (SubComponent) object associated with this StructureEvent.
	 * 
	 * @return the associated SubComponent object.
	 */
	public SubComponent getSourceComponent()
	{
		return (SubComponent)super.getSource();
	}
	
	/**
	 * Gets the target object associated with this StructureEvent.
	 * 
	 * @return the associated target object.
	 */
	public Object getTarget()
	{
		return target;
	}
	
	/**
	 * Gets the name of the target object associated with this StructureEvent.
	 * 
	 * @return the name of the associated target object.
	 */
	public String getTargetName()
	{
		return targetName;
	}
	
	/**
	 * Gets the value of the structure modification flag, indicating if a component has been added (true) or 
	 * removed (false).
	 * 
	 * @return true if the target component specified by this StructureEvent has been added, otherwise false.
	 */
	public boolean getStructureModification()
	{
		return structureModification;
	}
	
	public void notifyListener(final Object listener)
	{
		if(listener instanceof StructureEventListener)
			((StructureEventListener)listener).structureModification(this);
		else super.notifyListener(listener);
	}
	
	public RemoteEvent createRemoteEvent()
	{
		Object remoteObjectData = null;
		Object target = getTarget();
				
		if(target instanceof Property)
		{
			Property p = ((Property)target);
			remoteObjectData = new RemotePropertyData(p.getName(), p.getValueAsString(), p.getMetaData(), p.getModificationMode(), PropertyRmiAdapter.getType(p));
		}
		else if(target instanceof SubSystem)
		{
			SubSystem s = ((SubSystem)target);
         
			remoteObjectData = SubComponentRmiAdapter.getRemoteSubComponentData(s);
		}
		else if(target instanceof SubComponent)
		{
			SubComponent s = ((SubComponent)target);
			remoteObjectData = SubComponentRmiAdapter.getRemoteSubComponentData(s);
		}
		
		if(remoteObjectData != null)
      {
			return new RemoteStructureEvent(getSourceComponent().getFullName(), getTargetName(), remoteObjectData, getStructureModification());
      }
		else
      {
			return null;
      }
	}
}
